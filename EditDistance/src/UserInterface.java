
import edu.uci.ics.jung.algorithms.layout.FRLayout;
import edu.uci.ics.jung.algorithms.layout.Layout;
import edu.uci.ics.jung.graph.Graph;
import edu.uci.ics.jung.graph.util.Pair;
import edu.uci.ics.jung.visualization.GraphZoomScrollPane;
import edu.uci.ics.jung.visualization.VisualizationViewer;
import edu.uci.ics.jung.visualization.decorators.ToStringLabeller;
import edu.uci.ics.jung.visualization.renderers.Renderer;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.LinearGradientPaint;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Shape;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Point2D;
import java.util.Random;
import java.util.TimerTask;
import java.util.Vector;

import javax.swing.SwingUtilities;
import javax.swing.border.EtchedBorder;
import javax.swing.border.TitledBorder;
import javax.swing.text.BadLocationException;

import org.apache.commons.collections15.Transformer;
import org.apache.commons.collections15.functors.ChainedTransformer;
import java.util.Timer;
import java.util.TimerTask;


/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Raghu
 */
public class UserInterface extends javax.swing.JFrame {

   	GraphGenerator editDistanceGraph;
	Graph g;
	String textArea="";
	long estimatedTime;
	Thread t;
	JavaReminder Animator = null;
	VisualizationViewer<MyNode,MyLink> vv ;
	GraphZoomScrollPane pane;
	private MyNode[][] currentNodes;
	
    /**
     * Creates new form UserInterface
     */
    public UserInterface() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jTextArea3 = new javax.swing.JTextArea();
        
        jTextField1.setFont(new Font("Comic Sans MS",Font.PLAIN,15));
        jTextField1.setForeground(Color.BLACK);
        jTextField1.setBackground(Color.YELLOW);
        jTextField3.setFont(new Font("Comic Sans MS",Font.PLAIN,15));
        jTextField3.setForeground(Color.YELLOW);
        jTextField3.setBackground(Color.BLACK);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jPanel3.setMinimumSize(new java.awt.Dimension(100, 50));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jPanel4.setMinimumSize(new java.awt.Dimension(100, 50));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jPanel5.setPreferredSize(new java.awt.Dimension(100, 50));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jPanel6.setMinimumSize(new java.awt.Dimension(100, 50));
        jPanel6.setPreferredSize(new java.awt.Dimension(100, 50));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Edit Distance Dynamic Programming");
        setPreferredSize(new java.awt.Dimension(875, 700));
        setResizable(false);

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("String 1"));

        jLabel2.setText("Base String: ");

        jTextField1.setText("Enter Text Here");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("String 2"));

        jLabel4.setText("String To Convert: ");

        jTextField3.setText("Enter Text Here");

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton1.setText("Submit!");
        jButton1.setActionCommand("Submit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Animate");
        jButton2.setEnabled(false);
        jButton2.setPreferredSize(new java.awt.Dimension(69, 23));
        jButton2.setActionCommand("Animate");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 13, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(20, 20, 20))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Graph"));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 379, Short.MAX_VALUE)
        );

        SetDefaultText();
        
        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
    	jTextArea2.setEditable(false);
    	jTextArea2.setBorder(new TitledBorder("Program Status"));
        jScrollPane2.setViewportView(jTextArea2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        
       
        
	//	Animator=new ShowAnimation();
 //   	Timer uploadCheckerTimer = new Timer();
//    	uploadCheckerTimer.schedule(upd, 60 * 1000);
        
      //  Thread t = new Thread(Animator);
	//	t.start();
		

        pack();
    }// </editor-fold>                        

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    	
    	AddInputInfo();    	  		
    	jButton2.setEnabled(true);
    	
    	long startTime = System.nanoTime();  
        RunDPEngine(jTextField1.getText(),jTextField3.getText());
        estimatedTime = System.nanoTime() - startTime;
        
        AddDPInfo();
       // jTextField1.setEditable(false);
        //jTextField3.setEditable(false);
        //jButton1.setEnabled(false);

        DrawDPGraph();
        
        AddGraphInfo();
        AddPathInfo();
    }    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {

        // TODO add your handling code here:
    	if(evt.getActionCommand().equals("Animate"))
    	{	
    		currentNodes=editDistanceGraph.GetAllNodes();
    		jButton1.setEnabled(false);
    		jButton2.setText("Stop");
    		jButton2.setActionCommand("Stop");
    		jTextField3.setForeground(Color.BLACK);
    		jTextField3.setBackground(Color.YELLOW);
    		Animator=new JavaReminder(3);
    		
    		
    	}
    	else
    	{
    		Animator.cancelTimer();
    		//Animator.setFlag(false);

    	}
        
    }                                        

    private void restore()
    {
    	jTextField3.setForeground(Color.YELLOW);
		jTextField3.setBackground(Color.BLACK);
    
		jButton1.setEnabled(true);
		jButton2.setText("Animate");
		jButton2.setActionCommand("Animate");
    	editDistanceGraph.SetAllNodes(currentNodes);
        vv.getRenderContext().setVertexFillPaintTransformer(
        		new Transformer<MyNode, Paint>() {

                    @Override
                    public Paint transform(MyNode node) {
                    	if(node.highlight==true) return Color.YELLOW;
                          	else if(node.i==0 && node.j==0) return Color.RED;
                          	else if(node.i==DPEngine.rows-1 && node.j==DPEngine.columns-1) return Color.RED;
                    	else if(node.flag)return Color.WHITE;
                        return Color.GREEN;
                    }
        		});
        Transformer<MyNode,Paint> vertexPaint = new Transformer<MyNode,Paint>() {
            public Paint transform(MyNode node) {
            	if(node.highlight==true) return Color.YELLOW;
            	else if(node.i==0 && node.j==0) return Color.RED;
            	else if(node.i==DPEngine.rows-1 && node.j==DPEngine.columns-1) return Color.RED;
            	else if(node.flag)return Color.WHITE;
                return Color.GREEN;
            }
        };  
        Transformer<MyNode,Shape> vertexSize = new Transformer<MyNode,Shape>(){
            public Shape transform(MyNode i){
                Ellipse2D circle = new Ellipse2D.Double(-15, -15, 75, 50);
                // in this case, the vertex is twice as large
          //      if(i == 2) return AffineTransform.getScaleInstance(2, 2).createTransformedShape(circle);
                 return circle;
            }
        };
        Transformer<MyNode,Font> vertexFont = new Transformer<MyNode,Font>() {
            public Font transform(MyNode i) {
                return new Font("Comic Sans MS",Font.PLAIN,15);
            }
        };
        Transformer<MyLink,Paint> edgePaint = new Transformer<MyLink,Paint>() {
            public Paint transform(MyLink link) {
            	
            	if(link.flag) return Color.WHITE;
            	
            	return Color.DARK_GRAY; 
            		
           }
        }; 
        Transformer labelTransformer = new ChainedTransformer<String,String>(new Transformer[]{
                new ToStringLabeller<String>(),
                new Transformer<String,String>() {
                public String transform(String input) {
                    return "<html><font color=\"blue\">"+input.split(" ")[0];
                }}});
        
        
        vv.getRenderContext().setEdgeDrawPaintTransformer(edgePaint);
        vv.getRenderContext().setVertexFillPaintTransformer(vertexPaint);
        vv.getRenderContext().setVertexLabelTransformer(new ToStringLabeller());
        vv.getRenderContext().setEdgeLabelTransformer(labelTransformer);
        vv.getRenderer().getVertexLabelRenderer().setPosition(Renderer.VertexLabel.Position.CNTR);        
        vv.getRenderContext().setVertexFontTransformer(vertexFont);
        vv.getRenderContext().setVertexShapeTransformer(vertexSize);
        vv.repaint();
        jTextField3.setText(DPEngine.B);
    }

    private void SetDefaultText()
    {
    	String startInfo=	"  Advanced DSA Assignment -1 "+"\n"+
    						"  This Program demonstrates the working of the dynamic programming solution to the Edit Distance Problem \n" +
    						"  Edit Distance(Between Two Strings) : The minimum number of Insert , Delete and Substitute Operations requried to convert one string to another \n" +
    						"  Problem: Find the minimum Edit Distance between the strings given (base string and conversion string) \n" +
    						"\n";
    	
    	jTextArea2.append(startInfo);
    			
    }
    
    private void AddInputInfo()
    {
    	String str1,str2;
    	
    	str1=jTextField3.getText();
    	str2=jTextField1.getText();
    	
    	String inputInfo=	"\n\n\n"+
    						"  The Base String is  : " +str1 + ", length = "+str1.length() + "\n" +
    						"  The String to be Converted String is : " +str2 + ", length = "+str2.length() + "\n" +
    						"  Calculating Cost Matrix For the DP Solution .... "+"\n";
							
    	jTextArea2.append(inputInfo);    	
    }
    
    private void AddDPInfo()
    {
    	String dpInfo=	"  The Cost Matrix is : " + "\n" +
    					"  No.of rows = " + DPEngine.rows + " , " + " No. of columns = " + DPEngine.columns + "\n\n" ;
    	for(int i=0;i<DPEngine.rows;++i)
    	{
    		dpInfo=dpInfo.concat("  ");
    		for(int j=0;j<DPEngine.columns;++j)
    			dpInfo=dpInfo.concat(String.valueOf(DPEngine.GetCostMatrix()[i][j])+"  ");
    		dpInfo=dpInfo.concat("\n");
    	}
    	
    	dpInfo= dpInfo + "\n  The time taken for computing the matrix = " + estimatedTime/1000000 +"ms"+"\n";
    					
    	jTextArea2.append(dpInfo);
    }
    
    private void AddGraphInfo()
    {
    	String graphInfo= "  Generating graph now ... "+"\n"+
    					  "  Total No. of Nodes = " + g.getVertexCount() + "\n" +
    					  "  Total No. of Edges = " + g.getEdgeCount() + "\n";
    	
    	jTextArea2.append(graphInfo);
    }
    
    private void AddPathInfo()
    {
    	
    	String pathInfo=  "\n\n  No. Of Paths Found = " + MyUtils.getPaths().size() ;
    	int counter=1;
    	
    	for(Vector<MyNode> path: MyUtils.getPaths())
    	{
    		pathInfo=pathInfo + "\n" + "  Path " + counter +" : "+ path;
    		++counter;
    	}
    	
    					 
    	jTextArea2.append(pathInfo);
    	try {
			jTextArea2.setCaretPosition(jTextArea2.getLineStartOffset(jTextArea2.getLineCount()-1));
		} catch (BadLocationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	
    }
    
    
    void RunDPEngine(String firstString,String secondString)
    {    	
    	DPEngine.ComputeCosts(firstString,secondString);
    	DPEngine.PrintCostMatrix();
    	DPEngine.PrintParentMatrix();
    	editDistanceGraph=new GraphGenerator(DPEngine.GetCostMatrix(),DPEngine.GetParentMatrix());
    }        
    
    void DrawDPGraph()
    {
    	g=editDistanceGraph.GetGraph();
    	Layout<MyNode, MyLink> layout = new FRLayout<MyNode, MyLink>(g);
    	
    	 vv =  new VisualizationViewer<MyNode, MyLink>(layout,new Dimension(125*(DPEngine.columns+1),100*(DPEngine.rows+1)));

        Transformer<MyNode,Paint> vertexPaint = new Transformer<MyNode,Paint>() {
            public Paint transform(MyNode node) {
            	if(node.highlight==true) return Color.YELLOW;
            	else if(node.i==0 && node.j==0) return Color.RED;
            	else if(node.i==DPEngine.rows-1 && node.j==DPEngine.columns-1) return Color.RED;
            	else if(node.flag)return Color.WHITE;
                return Color.GREEN;
            }
        };  
        Transformer<MyNode,Shape> vertexSize = new Transformer<MyNode,Shape>(){
            public Shape transform(MyNode i){
                Ellipse2D circle = new Ellipse2D.Double(-15, -15, 75, 50);
                // in this case, the vertex is twice as large
          //      if(i == 2) return AffineTransform.getScaleInstance(2, 2).createTransformedShape(circle);
                 return circle;
            }
        };
        Transformer<MyNode,Font> vertexFont = new Transformer<MyNode,Font>() {
            public Font transform(MyNode i) {
                return new Font("Comic Sans MS",Font.PLAIN,15);
            }
        };
        Transformer<MyLink,Paint> edgePaint = new Transformer<MyLink,Paint>() {
            public Paint transform(MyLink link) {
            	
            	if(link.flag) return Color.WHITE;
            	
            	return Color.DARK_GRAY; 
            		
           }
        }; 
        Transformer labelTransformer = new ChainedTransformer<String,String>(new Transformer[]{
                new ToStringLabeller<String>(),
                new Transformer<String,String>() {
                public String transform(String input) {
                    return "<html><font color=\"blue\">"+input.split(" ")[0];
                }}});
        
        
        vv.getRenderContext().setEdgeDrawPaintTransformer(edgePaint);
        vv.getRenderContext().setVertexFillPaintTransformer(vertexPaint);
        vv.getRenderContext().setVertexLabelTransformer(new ToStringLabeller());
        vv.getRenderContext().setEdgeLabelTransformer(labelTransformer);
        vv.getRenderer().getVertexLabelRenderer().setPosition(Renderer.VertexLabel.Position.CNTR);        
        vv.getRenderContext().setVertexFontTransformer(vertexFont);
        vv.getRenderContext().setVertexShapeTransformer(vertexSize);
        
      
        pane =new GraphZoomScrollPane(vv);
        vv.setBackground(Color.cyan);
        LockVertices(layout);       
        
        jPanel1.removeAll();
        jPanel1.setLayout(null);
        
        pane.setSize(jPanel1.getSize());
        jPanel1.add(pane);
        jPanel1.revalidate();
        jPanel1.repaint();     
        
        FindAllPathSets();
        System.out.println("END");   
        
        
    }
    
    public void FindAllPathSets()
    {
    	MyUtils.MapAdjacencyList(editDistanceGraph.GetAllNodes());
    	MyUtils.DFSHelper(editDistanceGraph.GetGraph());  
    }
    
    public void LockVertices(Layout<MyNode, MyLink> l)
    {
    	MyNode allNodes[][]=editDistanceGraph.GetAllNodes();

    	System.out.println("TESTING!!");
    	for(int i=0;i<DPEngine.rows;++i)
    		for(int j=0;j<DPEngine.columns;++j)
    		{
    			l.setLocation(allNodes[i][j], new Point(125*(j+1),100*(i+1)));
    			l.lock(allNodes[i][j], true);
       		}
    	
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /*try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
*/
        /* Create and display the form */
    	UserInterface UI=new UserInterface();
    	UI.setVisible(true);
    	
    }
    
    public class JavaReminder {
        Timer timer;
        private int counter;
        private Vector<MyNode> randomPath;
		private MyNode prev,next;		
		private int size;
		private int editDistance=DPEngine.editDistance;
        private String textAreaText;
        private int randomNo,counter2,counter1;
    	private String info,operation,result,reference;		
        
        
        public JavaReminder(int seconds) {
        	prev=null;
            timer = new Timer();  //At this line a new Thread will be created            
            Random rand=new Random();
				
			counter1=counter2=counter=0;      
			randomNo=rand.nextInt(MyUtils.getPaths().size());
			randomPath=MyUtils.getPaths().elementAt(randomNo);
			size=randomPath.size();
			reference=DPEngine.A;
			info="";
			operation="----------";
			result=DPEngine.B;
    		
			textAreaText=jTextArea2.getText();
			
			info=info+	"\n  Animating Using Random Path : "+(randomNo+1) + "\n" +
						"  Counter\tFirst_String_Index\tSecond_String_Index\tOperation\tResult \n";
			updateProgress(info);
			currentNodes=editDistanceGraph.GetAllNodes();
			prev=next=editDistanceGraph.GetAllNodes()[0][0];
			editDistanceGraph.GetAllNodes()[0][0].highlight=true;
			
			 vv.getRenderContext().setVertexFillPaintTransformer(
             		new Transformer<MyNode, Paint>() {

                         @Override
                         public Paint transform(MyNode node) {
                         	if(node.highlight==true) return Color.YELLOW;
//                          	else if(node.i==0 && node.j==0) return Color.RED;
//                          	else if(node.i==DPEngine.rows-1 && node.j==DPEngine.columns-1) return Color.RED;
                         	else if(node.flag)return Color.WHITE;
                             return Color.GREEN;
                         }
             		});
                         
             vv.repaint();
             info="  "+(counter)+"\t\t"+counter1+"\t\t"+counter2+"\t"+operation+"\t"+result+"\n";             
             updateProgress(info);
			
			
			timer.scheduleAtFixedRate(new RemindTask(),3000, seconds*1000); //delay in milliseconds
        }
        
        public void cancelTimer()
        {
        	restore();	
        	vv.repaint();
        	timer.cancel();

        }

        class RemindTask extends TimerTask {

            @Override
            public void run() {
                System.out.println("ReminderTask is completed by Java timer");        		
                
                if(counter+1==size){
                	System.out.println("DOne");                   	
                	cancelTimer();
                	
                }
                else{
    			next=randomPath.elementAt(counter+1);
    			
                editDistanceGraph.GetAllNodes()[next.i][next.j].highlight=true;
                
                        
                final MyLink e=(MyLink) g.findEdge(prev, next);
                
                Transformer labelTransformer = new ChainedTransformer<String,String>(new Transformer[]{
                        new ToStringLabeller<String>(),
                        new Transformer<String,String>() {
                        public String transform(String input) {    
                        	if(e.toString().equals(input)){                        		
                        		return "<html><font color=\"brown\" size=\"5\">"+input.split(" ")[0];
                        	}
                        	return "<html><font color=\"blue\">"+input.split(" ")[0];
                            
                        }}});
                
                
                vv.getRenderContext().setEdgeLabelTransformer(labelTransformer);
                       
                operation=e.type;
                if(operation.equals("Delete")) result=MyUtils.RemoveCharacter(result, counter1+1);
                else if(operation.equals("Insert")) result=MyUtils.InsertCharacter(result, counter1+1, reference.charAt(counter2));
                else if(operation.equals("Substitute")) result=MyUtils.SubstituteCharacter(result,counter1+1,reference.charAt(counter2));
                
                
                info="  "+(counter+1)+"\t\t"+(counter1+1)+"\t\t"+(counter2+1)+"\t"+operation+"\t"+result+"\n";
                
                updateProgress(info);
                updateTextField(result);
                vv.getRenderContext().setVertexFillPaintTransformer(
                		new Transformer<MyNode, Paint>() {

                            @Override
                            public Paint transform(MyNode node) {
                            	if(node.highlight==true) return Color.YELLOW;
  //                          	else if(node.i==0 && node.j==0) return Color.RED;
  //                          	else if(node.i==DPEngine.rows-1 && node.j==DPEngine.columns-1) return Color.RED;
                            	else if(node.flag)return Color.WHITE;
                                return Color.GREEN;
                            }
                		});
                            
                vv.repaint();   
                prev=next;
                
                if(!operation.equals("Delete"))
                {
                	++counter1;
                	++counter2;
                }
                ++counter;
                }
            }
        }
    
    	//		jTextArea2.append("  First_String_Index\tOperation\tResult \n");
        //  timer.cancel(); //Not necessary because we call System.exit
          //System.exit(0); //Stops the AWT thread (and everything else)
			//updateProgress(info);
			    			   			
			
        /*  vv.getRenderContext().setEdgeDrawPaintTransformer(
                  new Transformer<MyLink, Paint>() {

                      @Override
                      public Paint transform(MyLink edge) {
                          // Find both points of the edge.
                          Pair<MyNode> vs = vv.getGraphLayout().getGraph()
                                  .getEndpoints(edge);
                          Point2D p1 = vv.getGraphLayout().transform(
                                  vs.getFirst());
                          Point2D p2 = vv.getGraphLayout().transform(
                                  vs.getSecond());

                          // This code won't handle self-edges.
                          if (p1.equals(p2)) {
                              return Color.red;
                          }

                          Color[] colors = { Color.gray, Color.red,
                                  Color.gray };
                          float start = (float) Math.max(0.0, keyframe
                                  - width);
                          float end = (float) Math.min(1.0, keyframe + width);
                          float[] fractions = { start, (float) keyframe, end };
                          return new LinearGradientPaint(p1, p2, fractions,
                                  colors);
                      }

                  });*/

    }
 
    
    private void updateProgress(final String text) {
    	  SwingUtilities.invokeLater(new Runnable() {
    	    public void run() {
    	      // Here, we can safely update the GUI
    	      // because we'll be called from the
    	      // event dispatch thread
    	      	
    	      jTextArea2.append(text);
    	      try {
				jTextArea2.setCaretPosition(jTextArea2.getLineStartOffset(jTextArea2.getLineCount()-1));
			} catch (BadLocationException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    	    }
    	  });
    	}
    private void updateTextField(final String text) {
  	  SwingUtilities.invokeLater(new Runnable() {
  	    public void run() {
  	      // Here, we can safely update the GUI
  	      // because we'll be called from the
  	      // event dispatch thread
  	      	
  	      jTextField3.setText(text);
  	  }});
  	}
  
    
/*    public class ShowAnimation implements Runnable{

    	public boolean flag;
    	
    	public ShowAnimation()
    	{
    		flag=false;
    	}
    	
    	public void setFlag(boolean flag)
    	{
    		this.flag=flag;
    	}
    	
        @Override
        public void run() {
        	while(true)
        	{
        		try {
					Thread.sleep(100);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
        		
        		if(flag){

        			String info="";
        			
        			Vector<MyNode> randomPath;
        			MyNode prev,next;
        			int randomNo;
        			int size;
        			int editDistance=DPEngine.editDistance;
        			Random rand = new Random();
        			
        			size=MyUtils.getPaths().size();
        			randomNo=rand.nextInt(size);      
        			randomPath=MyUtils.getPaths().elementAt(randomNo);
        		
        			String textAreaText=jTextArea2.getText();
        			
        			info=info+	"\n  Animating Using Path " + randomNo + "\n" +
        						"  First_String_Index\tOperation\tResult \n";
					prev=next=null;
					String operation,result,line;
					
					result=jTextField1.getText();
					operation="";
					
        			for(int i=0;i<randomPath.size();++i)
        			{
        				next=randomPath.elementAt(i);
        				if(prev==null){
        					operation="---------";        					
        				}      				
        				
        				line="\n  \t"+(i+1)+"\t"+operation+"\t"+result;
        			//	jTextArea2.append(line);
        				
        				editDistanceGraph.GetAllNodes()[next.i][next.j].highlight=true;
        				
        				prev=next;
        				try {
        					Thread.sleep(1000);
        				} catch (InterruptedException e) {
        					// TODO Auto-generated catch block
        					e.printStackTrace();
        				}
                		
        			
        			}
        			
        			flag=false;
        			
        			String currentText=jTextArea2.getText();
        			jTextArea2.setText(textAreaText);
        			jTextArea2.append("\n\n"+currentText);
        			try {
						jTextArea2.setCaretPosition(jTextArea2.getLineStartOffset(jTextArea2.getLineCount()-1));
					} catch (BadLocationException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
        		}
        		
        	}
        }

    }
    */
 
    
    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration                   
}
